// Copyright Â© 2022 Nikolay Melnikov. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

using System;
using System.Collections.Generic;
using System.Linq;
using Depra.Random.Domain.Randomizers;

namespace Depra.Random.Domain.Extensions
{
    public static partial class RandomizerExtensions
    {
        /// <summary>
        /// Fills the elements of a <paramref name="buffer"/> with random characters.
        /// </summary>
        /// <param name="random">The given <see cref="INumberRandomizer{T}"/> instance.</param>
        /// <param name="buffer">A <see cref="Array"/> of characters to contain random values.</param>
        public static void NextChars(this INumberRandomizer<int> random, char[] buffer)
        {
            for (var i = 0; i < buffer.Length; ++i)
            {
                // Capping to byte value here to not exceed
                // 56 bit crypto keys length requirement by
                // Apple to avoid cryptography declaration.
                buffer[i] = (char) (random.Next() % 256);
            }
        }

        /// <summary>
        /// Generate random <see cref="char"/> array with specific lenght.
        /// </summary>
        /// <param name="randomizer">The given <see cref="INumberRandomizer{T}"/> instance.</param>
        /// <param name="length">The length of the <see cref="char"/> <see cref="Array"/> to be generated.</param>
        /// <param name="includeLowerCase">Whether there will be lowercase characters in the resulting <see cref="Array"/>.</param>
        /// <returns>A <see cref="char"/> <see cref="Array"/> generated by the specified  <paramref name="length"/>.</returns>
        public static char[] NextChars(this INumberRandomizer<int> randomizer, int length,
            bool includeLowerCase)
        {
            var characters = GetAvailableRandomCharacters(includeLowerCase);
            var randomChars = new char[length];
            for (var i = 0; i < length; i++)
            {
                randomChars[i] = characters[randomizer.Next(characters.Count)];
            }

            return randomChars;
        }
        
        private static List<char> GetAvailableRandomCharacters(bool includeLowerCase)
        {
            var integers = Enumerable.Empty<int>();
            integers = integers.Concat(Enumerable.Range('A', 26));
            integers = integers.Concat(Enumerable.Range('0', 10));

            if (includeLowerCase)
            {
                integers = integers.Concat(Enumerable.Range('a', 26));
            }

            var characters = new List<char>();
            foreach (var i in integers)
            {
                var character = (char) i;
                characters.Add(character);
            }

            return characters;
        }
    }
}