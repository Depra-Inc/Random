// Copyright Â© 2022 Nikolay Melnikov. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

using System;
using Depra.Random.Domain.Randomizers;

namespace Depra.Random.Domain.Extensions
{
    public static partial class RandomizerExtensions
    {
        /// <summary>
        /// Returns a random <see cref="string"/> of the specified <paramref name="length"/>
        /// </summary>
        /// <param name="randomizer">The given <see cref="INumberRandomizer{T}"/> instance.</param>
        /// <param name="length">The length of the <see cref="string"/> to be generated.</param>
        /// <param name="includeLowerCase">Whether there will be lowercase characters in the resulting <see cref="string"/>.</param>
        /// <returns>A <see cref="string"/> value generated by the specified <paramref name="length"/>.</returns>
        public static string NextString(this INumberRandomizer<int> randomizer, int length, bool includeLowerCase) =>
            new string(randomizer.NextChars(length, includeLowerCase));

        /// <summary>
        /// Generate random <see cref="string"/> of <paramref name="length"/> for <paramref name="allowedCharacters"/>.
        /// </summary>
        /// <param name="randomizer">The given <see cref="INumberRandomizer{T}"/> instance.</param>
        /// <param name="length">The length of the <see cref="string"/> to be generated.</param>
        /// <param name="allowedCharacters">A <see cref="string"/> containing the allowed characters. Recurring characters may appear in the result more frequently than others.</param>
        /// <returns>
        /// A <see cref="string"/> value generated by the specified  <paramref name="length"/> and contains only the specified characters.
        /// </returns>
        /// <remarks>
        /// <see href="https://stackoverflow.com/questions/1344221/how-can-i-generate-random-alphanumeric-strings">source</see>
        /// </remarks>
        public static string NextString(this INumberRandomizer<int> randomizer, int length, string allowedCharacters)
        {
            if (length < 0)
            {
                throw new ArgumentOutOfRangeException(nameof(length));
            }

            if (string.IsNullOrEmpty(allowedCharacters))
            {
                throw new ArgumentException(nameof(allowedCharacters));
            }

            var randomString = new char[length];
            for (var i = 0; i < length; i++)
            {
                randomString[i] = allowedCharacters[randomizer.Next(allowedCharacters.Length)];
            }

            return new string(randomString);
        }
    }
}